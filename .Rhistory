ggplot(data = SampleVerification, mapping = aes(x = ResampleId)) + geom_point(aes(y = TrainRows), col = "blue") + geom_point(aes(y = TestRows), col = "red") + theme_classic() + legend("topright", col = c("red","blue"), pch = 16, legend = c("test","train")) + xlab("Samples")
ggplot(data = SampleVerification, mapping = aes(x = ResampleId)) + geom_point(aes(y = TrainRows), col = "blue") + geom_point(aes(y = TestRows), col = "red") + theme_classic() + legend("topright", col = c("red","blue"), pch = 16, legend = c("test","train"))
# Data sampled without replacement
samples <- rsample::mc_cv(data = GermanCredit,prop = 0.632,times = 1000)
# Verify the dimensions of the first of the 1000 splits
SampleVerification <- purrr::map_df(1:1000,.f = function(x) data.frame(ResampleId = x,TrainRows = nrow(analysis(samples$splits[[x]])), TestRows = nrow(assessment(samples$splits[[x]]))) )
ggplot(data = SampleVerification, mapping = aes(x = ResampleId)) + geom_point(aes(y = TrainRows), col = "blue") + geom_point(aes(y = TestRows), col = "red") + theme_classic() + legend("topright", col = c("red","blue"), pch = 16, legend = c("test","train"))
ggplot(data = SampleVerification, mapping = aes(x = ResampleId)) + geom_point(aes(y = TrainRows), col = "blue") + geom_point(aes(y = TestRows), col = "red") + theme_classic()
legend("topright", col = c("red","blue"), pch = 16, legend = c("test","train"))
ggplot(data = SampleVerification, mapping = aes(x = ResampleId)) + geom_point(aes(y = TrainRows), col = "blue") + geom_point(aes(y = TestRows), col = "red") + theme_classic() + scale_color_discrete(name = "Split", labels = c("Train", "Test")) + ylab("Rows or Number od samples")
ggplot(data = SampleVerification, mapping = aes(x = ResampleId)) + geom_point(aes(y = TrainRows), col = "blue") + geom_point(aes(y = TestRows), col = "red") + scale_color_discrete(name = "Split", labels = c("Train", "Test")) + ylab("Rows or Number od samples")
ggplot(data = SampleVerification) + geom_point(aes(y = TrainRows,x = ResampleId), col = "blue") + geom_point(aes(y = TestRows,x = ResampleId), col = "red") + scale_color_discrete(name = "Split", labels = c("Train", "Test")) + ylab("Rows or Number od samples")
ggplot(data = SampleVerification) + geom_point(aes(y = TrainRows,x = ResampleId), col = "blue") + geom_point(aes(y = TestRows,x = ResampleId), col = "red") + legend(scale_color_discrete(name = "Split", labels = c("Train", "Test")) + ylab("Rows or Number of samples"))
ggplot(data = SampleVerification) + geom_point(aes(y = TrainRows,x = ResampleId), col = "blue") + geom_point(aes(y = TestRows,x = ResampleId), col = "red") + scale_color_manual(name = "Split", labels = c("Train", "Test")) + ylab("Rows or Number of samples")
ggplot(data = SampleVerification) + geom_point(aes(y = TrainRows,x = ResampleId), col = TrainRows) + geom_point(aes(y = TestRows,x = ResampleId), col = TestRows) + scale_color_manual(name = "Split", labels = c("Train", "Test")) + ylab("Rows or Number of samples")
ggplot(data = SampleVerification) + geom_point(aes(y = TrainRows,x = ResampleId), col = "TrainRows") + geom_point(aes(y = TestRows,x = ResampleId), col = "TestRows") + scale_color_manual(name = "Split", labels = c("Train", "Test")) + ylab("Rows or Number of samples")
ggplot(data = SampleVerification) + geom_point(aes(y = TrainRows,x = ResampleId), col = "TrainRows") + geom_point(aes(y = TestRows,x = ResampleId), col = "TestRows")
lattice::xyplot(TrainRows ~ ResampleId,data = SampleVerification)
lattice::xyplot(TrainRows + TestRows ~ ResampleId,data = SampleVerification)
lattice::xyplot(TrainRows + TestRows ~ ResampleId,data = SampleVerification,auto.key = T)
lattice::xyplot(TrainRows + TestRows ~ ResampleId,data = SampleVerification,auto.key = T,ylab = "Rows of data")
lattice::xyplot(TrainRows + TestRows ~ ResampleId,data = SampleVerification,auto.key = list(space = "bottomright"),ylab = "Rows of data")
lattice::xyplot(TrainRows + TestRows ~ ResampleId,data = SampleVerification,auto.key = T,ylab = "Rows of data")
lattice::xyplot(TrainRows + TestRows ~ ResampleId,data = SampleVerification,auto.key = T,ylab = "Rows of data",
key = simpleKey(text = c("Train","Test"), corner = c(1200, 350),
lines = FALSE, points = TRUE))
plot(TrainRows + TestRows ~ ResampleId,data = SampleVerification,auto.key = T,ylab = "Rows of data")
plot(TrainRows + TestRows ~ ResampleId,data = SampleVerification,ylab = "Rows of data")
plot(TrainRows | TestRows ~ ResampleId,data = SampleVerification,ylab = "Rows of data")
plot(TrainRows + TestRows ~ ResampleId,data = SampleVerification,ylab = "Rows of data",
key = simpleKey(text = c("Train","Test"), corner = c(1200, 350),
lines = FALSE, points = TRUE))
lattice::xyplot(TrainRows + TestRows ~ ResampleId,data = SampleVerification,ylab = "Rows of data",
key = simpleKey(text = c("Train","Test"), corner = c(1200, 350),
lines = FALSE, points = TRUE))
lattice::xyplot(TrainRows + TestRows ~ ResampleId,data = SampleVerification,ylab = "Rows of data",auto.key=list(space=“top”, columns=4,title= "District", cex.title=1,lines=TRUE, points=FALSE))
lattice::xyplot(TrainRows + TestRows ~ ResampleId,data = SampleVerification,ylab = "Rows of data",auto.key=list(space="top", columns=4,title= "District", cex.title=1,lines=TRUE, points=FALSE))
lattice::xyplot(TrainRows + TestRows ~ ResampleId,data = SampleVerification,ylab = "Rows of data",auto.key=list(space="bottomright", columns=4, cex.title=1,lines=TRUE, points=FALSE))
lattice::xyplot(TrainRows + TestRows ~ ResampleId,data = SampleVerification,ylab = "Rows of data",auto.key=list(space="bottom", columns=4, cex.title=1,lines=TRUE, points=FALSE))
lattice::xyplot(TrainRows + TestRows ~ ResampleId,data = SampleVerification,ylab = "Rows of data",auto.key=list(space="right", columns=4, cex.title=1,lines=TRUE, points=FALSE))
lattice::xyplot(TrainRows + TestRows ~ ResampleId,data = SampleVerification,ylab = "Rows of data",auto.key=list(space="bottom", columns=4, cex.title=1,lines=TRUE, points=FALSE, box = T))
samples$splits[[1]]
test <- samples[1,]
test <- samples[1000,]
test
test$splits
analysis(test$splits[[1]])
Train <- analysis(test$splits[[1]])
lm.fit <- lm(Amount ~ ., data = Train)
broom::glance(lm.fit)
broom::augment(lm.fit)
coef(lm.fit)
coefs <- coefficients(lm.stat)
coefs <- coefficients(lm.fit)
coefs
tibble::as.tibble(coefs)
View(.Last.value)
GermanCredit %>% is.numeric(.) %>% names()
GermanCredit %>% dplyr::select_if(is.numeric(.)) %>% names
GermanCredit %>% dplyr::select_if(is.numeric(.)) %>% names()
GermanCredit %>% dplyr::select_vars(is.mumeric())
GermanCredit %>% dplyr::select(-Amount) %>% dplyr::select_if(is.numeric) %>% names
GermanCredit %>% dplyr::select(-Amount) %>% dplyr::select_if(!is.integer) %>% names
GermanCredit %>% dplyr::select(-Amount) %>% dplyr::select_if(!is.integer(.)) %>% names
GermanCredit %>% dplyr::select(-Amount) %>% dplyr::select_if(!is.integer) %>% names
GermanCredit %>% dplyr::select(-Amount) %>% dplyr::select_if(is.integer) %>% names
GermanCredit %>% dplyr::select(-Amount) %>% dplyr::select_if(!is.integer) %>% names
GermanCredit %>% dplyr::select(-Amount) %>% dplyr::select_if(!is.integer) %>% names
GermanCredit %>% dplyr::select(-Amount) %>% dplyr::!select_if(is.integer) %>% names
GermanCredit %>% dplyr::select(-Amount) %>% dplyr::select_if(!is.integer(.)) %>% names
GermanCredit %>% dplyr::select(-Amount) %>% dplyr::select_if(is.numeric) %>% names
GermanCredit %>% dplyr::select(-Amount) %>% dplyr::select_if(is.integer) %>% names
!colnames(GermanCredit) %in%  GermanCredit %>% dplyr::select(-Amount) %>% dplyr::select_if(is.integer) %>% names
GermanCredit %>% dplyr::select(-Amount) %>% dplyr::select_if(is.integer) %>% names
integerVars <- GermanCredit %>% dplyr::select(-Amount) %>% dplyr::select_if(is.integer) %>% names
tobeConvertedVars <- Vars[!Vars %in% integerVars]
Vars <- colnames(GermanCredit)
tobeConvertedVars <- Vars[!Vars %in% integerVars]
tobeConvertedVars
integerVars <- GermanCredit  %>% dplyr::select_if(is.integer) %>% names
Vars <- colnames(GermanCredit)
tobeConvertedVars <- Vars[!Vars %in% integerVars]
tobeConvertedVars
GermanCredit.copy <- GermanCredit %>% select(!!tobeConvertedVars) %>% as.factor(.)
GermanCredit["Housing.Own"]
data("GermanCredit")
skimr::skim(GermanCredit)
integerVars <- GermanCredit  %>% dplyr::select_if(is.integer) %>% names
Vars <- colnames(GermanCredit)
tobeConvertedVars <- Vars[!Vars %in% integerVars]
GermanCredit[tobeConvertedVars] <- lapply(GermanCredit[tobeConvertedVars], factor)
skimr::skim(GermanCredit)
View(GermanCredit)
# Data sampled without replacement
samples <- rsample::mc_cv(data = GermanCredit,prop = 0.632,times = 1000)
# Verify the dimensions of the first of the 1000 splits
SampleVerification <- purrr::map_df(1:1000,.f = function(x) data.frame(ResampleId = x,TrainRows = nrow(analysis(samples$splits[[x]])), TestRows = nrow(assessment(samples$splits[[x]]))) )
lattice::xyplot(TrainRows + TestRows ~ ResampleId,data = SampleVerification,ylab = "Rows of data",auto.key=list(space="bottom", columns=4, cex.title=1,lines=TRUE, points=FALSE, box = T))
lm.fit <- lm(Amount ~ ., data = Train)
test <- samples[1000,]
Train <- analysis(test$splits[[1]])
lm.fit <- lm(Amount ~ ., data = Train)
caret::nearZeroVar(GermanCredit)
Vars[caret::nearZeroVar(GermanCredit)]
caret::nearZeroVar(GermanCredit,uniqueCut = 100)
caret::nearZeroVar(GermanCredit,uniqueCut = 1)
caret::nearZeroVar(GermanCredit,uniqueCut = 0)
Vars[caret::nearZeroVar(GermanCredit,uniqueCut = 0)]
data("GermanCredit")
skimr::skim(GermanCredit)
integerVars <- GermanCredit  %>% dplyr::select_if(is.integer) %>% names
Vars <- colnames(GermanCredit)
tobeConvertedVars <- Vars[!Vars %in% integerVars]
GermanCredit[tobeConvertedVars] <- lapply(GermanCredit[tobeConvertedVars], factor)
UniqueVars <- Vars[caret::nearZeroVar(GermanCredit,uniqueCut = 0)]
GermanCredit.copy <- GermanCredit %>% dplyr::select_vars(Vars[!Vars %in% UniqueVars])
GermanCredit.copy <- GermanCredit %>% dplyr::select_vars(!!Vars[!!!Vars %in% UniqueVars])
GermanCredit.copy <- GermanCredit %>% dplyr::select_vars(!!Vars[!!!Vars %in% UniqueVars])
Vars2select <- Vars[!Vars %in% UniqueVars]
GermanCredit.copy <- GermanCredit %>% dplyr::select_vars(!!Vars2select)
Vars2select <- Vars[!Vars %in% UniqueVars]
GermanCredit.copy <- GermanCredit %>% dplyr::select_vars(!!Vars2select)
GermanCredit.copy <- GermanCredit %>% dplyr::select(!!Vars2select)
GermanCredit <- GermanCredit %>% dplyr::select(!!Vars2select)
# Data sampled without replacement
samples <- rsample::mc_cv(data = GermanCredit,prop = 0.632,times = 1000)
# Verify the dimensions of the first of the 1000 splits
SampleVerification <- purrr::map_df(1:1000,.f = function(x) data.frame(ResampleId = x,TrainRows = nrow(analysis(samples$splits[[x]])), TestRows = nrow(assessment(samples$splits[[x]]))) )
lattice::xyplot(TrainRows + TestRows ~ ResampleId,data = SampleVerification,ylab = "Rows of data",auto.key=list(space="bottom", columns=4, cex.title=1,lines=TRUE, points=FALSE, box = T))
test <- samples[1000,]
Train <- analysis(test$splits[[1]])
lm.fit <- lm(Amount ~ ., data = Train)
coefficients(lm.fit)
View(GermanCredit.copy)
ModelSummaries <- function(split){
# get the train and test sets from the split
Train <- rsample::analysis(split$splits[[1]])
Test <- rsample::assessment(split$splits[[1]])
# linear model fit
lm.fit <- lm(Amount ~ ., data = Train)
coefs <- coefficients(lm.fit)
AdjR2.Train <- summary(lm.fit)$adj.r.squared
yPred <- predict(lm.fit,newdata = Test)
R2.test <- cor(yPred,Test$Amount)^2
return(list(Betas = coefs,Train.R2 = AdjR2.Train, Test.R2 = R2.test))
}
resptest <- ModelSummaries(test)
resptest
ModelStats <- purrr::map_df(1:1000,function(x) ModelSummaries(samples[x,]))
knitr::opts_chunk$set(echo = TRUE)
library(caret)
library(rsample)
library(ggplot2)
data("GermanCredit")
skimr::skim(GermanCredit)
integerVars <- GermanCredit  %>% dplyr::select_if(is.integer) %>% names
Vars <- colnames(GermanCredit)
tobeConvertedVars <- Vars[!Vars %in% integerVars]
GermanCredit[tobeConvertedVars] <- lapply(GermanCredit[tobeConvertedVars], factor)
UniqueVars <- Vars[caret::nearZeroVar(GermanCredit,uniqueCut = 0)]
Vars2select <- Vars[!Vars %in% UniqueVars]
GermanCredit <- GermanCredit %>% dplyr::select(!!Vars2select)
# Data sampled without replacement
samples <- rsample::mc_cv(data = GermanCredit,prop = 0.632,times = 1000)
# Verify the dimensions of the first of the 1000 splits
SampleVerification <- purrr::map_df(1:1000,.f = function(x) data.frame(ResampleId = x,TrainRows = nrow(analysis(samples$splits[[x]])), TestRows = nrow(assessment(samples$splits[[x]]))) )
lattice::xyplot(TrainRows + TestRows ~ ResampleId,data = SampleVerification,ylab = "Rows of data",auto.key=list(space="bottom", columns=4, cex.title=1,lines=TRUE, points=FALSE, box = T))
# Function to get model stats
ModelSummaries <- function(split){
# get the train and test sets from the split
Train <- rsample::analysis(split$splits[[1]])
Test <- rsample::assessment(split$splits[[1]])
# linear model fit
lm.fit <- lm(Amount ~ ., data = Train)
coefs <- coefficients(lm.fit)
AdjR2.Train <- summary(lm.fit)$adj.r.squared
yPred <- predict(lm.fit,newdata = Test)
R2.test <- cor(yPred,Test$Amount)^2
return(list(Betas = coefs,Train.R2 = AdjR2.Train, Test.R2 = R2.test))
}
ModelStats <- purrr::map_df(1:1000,function(x) ModelSummaries(samples[x,]))
data("GermanCredit")
skimr::skim(GermanCredit)
integerVars <- GermanCredit  %>% dplyr::select_if(is.integer) %>% names
Vars <- colnames(GermanCredit)
tobeConvertedVars <- Vars[!Vars %in% integerVars]
#GermanCredit[tobeConvertedVars] <- lapply(GermanCredit[tobeConvertedVars], factor)
UniqueVars <- Vars[caret::nearZeroVar(GermanCredit,uniqueCut = 0)]
Vars2select <- Vars[!Vars %in% UniqueVars]
GermanCredit <- GermanCredit %>% dplyr::select(!!Vars2select)
# Function to get model stats
ModelSummaries <- function(split){
# get the train and test sets from the split
Train <- rsample::analysis(split$splits[[1]])
Test <- rsample::assessment(split$splits[[1]])
# linear model fit
lm.fit <- lm(Amount ~ ., data = Train)
coefs <- coefficients(lm.fit)
AdjR2.Train <- summary(lm.fit)$adj.r.squared
yPred <- predict(lm.fit,newdata = Test)
R2.test <- cor(yPred,Test$Amount)^2
return(list(Betas = coefs,Train.R2 = AdjR2.Train, Test.R2 = R2.test))
}
ModelStats <- purrr::map_df(1:1000,function(x) ModelSummaries(samples[x,]))
knitr::opts_chunk$set(echo = TRUE)
library(caret)
library(rsample)
library(ggplot2)
data("GermanCredit")
skimr::skim(GermanCredit)
integerVars <- GermanCredit  %>% dplyr::select_if(is.integer) %>% names
Vars <- colnames(GermanCredit)
tobeConvertedVars <- Vars[!Vars %in% integerVars]
GermanCredit[tobeConvertedVars] <- lapply(GermanCredit[tobeConvertedVars], factor)
UniqueVars <- Vars[caret::nearZeroVar(GermanCredit,uniqueCut = 0)]
Vars2select <- Vars[!Vars %in% UniqueVars]
GermanCredit <- GermanCredit %>% dplyr::select(!!Vars2select)
# Data sampled without replacement
samples <- rsample::mc_cv(data = GermanCredit,prop = 0.632,times = 1000)
# Verify the dimensions of the first of the 1000 splits
SampleVerification <- purrr::map_df(1:1000,.f = function(x) data.frame(ResampleId = x,TrainRows = nrow(analysis(samples$splits[[x]])), TestRows = nrow(assessment(samples$splits[[x]]))) )
lattice::xyplot(TrainRows + TestRows ~ ResampleId,data = SampleVerification,ylab = "Rows of data",auto.key=list(space="bottom", columns=4, cex.title=1,lines=TRUE, points=FALSE, box = T))
# Function to get model stats
ModelSummaries <- function(split){
# get the train and test sets from the split
Train <- rsample::analysis(split$splits[[1]])
Vars <- colnames(Train)
# get variables that have only one unique value
UniqueVars <- caret::nearZeroVar(Train,uniqueCut = 0)
if(UniqueVars > 0){
Train <- Train[,UniqueVars*-1]
Test <- Test[,UniqueVars*-1]
}
Test <- rsample::assessment(split$splits[[1]])
# linear model fit
lm.fit <- lm(Amount ~ ., data = Train)
coefs <- coefficients(lm.fit)
AdjR2.Train <- summary(lm.fit)$adj.r.squared
yPred <- predict(lm.fit,newdata = Test)
R2.test <- cor(yPred,Test$Amount)^2
return(list(Betas = coefs,Train.R2 = AdjR2.Train, Test.R2 = R2.test))
}
ModelStats <- purrr::map_df(1:1000,function(x) ModelSummaries(samples[x,]))
# Function to get model stats
ModelSummaries <- function(split){
# get the train and test sets from the split
Train <- rsample::analysis(split$splits[[1]])
Vars <- colnames(Train)
# get variables that have only one unique value
browser()
UniqueVars <- caret::nearZeroVar(Train,uniqueCut = 0)
if(UniqueVars > 0){
Train <- Train[,UniqueVars*-1]
Test <- Test[,UniqueVars*-1]
}
Test <- rsample::assessment(split$splits[[1]])
# linear model fit
lm.fit <- lm(Amount ~ ., data = Train)
coefs <- coefficients(lm.fit)
AdjR2.Train <- summary(lm.fit)$adj.r.squared
yPred <- predict(lm.fit,newdata = Test)
R2.test <- cor(yPred,Test$Amount)^2
return(list(Betas = coefs,Train.R2 = AdjR2.Train, Test.R2 = R2.test))
}
ModelStats <- purrr::map_df(1:1000,function(x) ModelSummaries(samples[x,]))
caret::nearZeroVar(Train,uniqueCut = 0)
x <- caret::nearZeroVar(Train,uniqueCut = 0)
length(x)
# Function to get model stats
ModelSummaries <- function(split){
# get the train and test sets from the split
Train <- rsample::analysis(split$splits[[1]])
Vars <- colnames(Train)
# get variables that have only one unique value
browser()
UniqueVars <- caret::nearZeroVar(Train,uniqueCut = 0)
if(UniqueVars > 0){
Train <- Train[,UniqueVars*-1]
Test <- Test[,UniqueVars*-1]
}
Test <- rsample::assessment(split$splits[[1]])
# linear model fit
lm.fit <- lm(Amount ~ ., data = Train)
coefs <- coefficients(lm.fit)
AdjR2.Train <- summary(lm.fit)$adj.r.squared
yPred <- predict(lm.fit,newdata = Test)
R2.test <- cor(yPred,Test$Amount)^2
return(list(Betas = coefs,Train.R2 = AdjR2.Train, Test.R2 = R2.test))
}
ModelStats <- purrr::map_df(1:1000,function(x) ModelSummaries(samples[x,]))
Q
UniqueVars <- caret::nearZeroVar(Train,uniqueCut = 0)
# Function to get model stats
ModelSummaries <- function(split){
# get the train and test sets from the split
Train <- rsample::analysis(split$splits[[1]])
Vars <- colnames(Train)
# get variables that have only one unique value
UniqueVars <- caret::nearZeroVar(Train,uniqueCut = 0)
if(length(UniqueVars) > 0){
Train <- Train[,UniqueVars*-1]
Test <- Test[,UniqueVars*-1]
}
Test <- rsample::assessment(split$splits[[1]])
# linear model fit
lm.fit <- lm(Amount ~ ., data = Train)
coefs <- coefficients(lm.fit)
AdjR2.Train <- summary(lm.fit)$adj.r.squared
yPred <- predict(lm.fit,newdata = Test)
R2.test <- cor(yPred,Test$Amount)^2
return(list(Betas = coefs,Train.R2 = AdjR2.Train, Test.R2 = R2.test))
}
ModelStats <- purrr::map_df(1:1000,function(x) ModelSummaries(samples[x,]))
ModelStats <- purrr::map(1:1000,function(x) ModelSummaries(samples[x,]))
View(ModelStats)
GermanCredit.copy <- caret::preProcess(GermanCredit,center = T, scale = T)
GermanCredit.copy <- caret::preProcess(GermanCredit,center = T, scale = T)
GermanCredit <- caret::preProcess(GermanCredit,center = T, scale = T)
# Data sampled without replacement
samples <- rsample::mc_cv(data = GermanCredit,prop = 0.632,times = 1000)
samples <- rsample::mc_cv(data = GermanCredit,prop = 0.632,times = 1000)
View(GermanCredit)
data("GermanCredit")
skimr::skim(GermanCredit)
integerVars <- GermanCredit  %>% dplyr::select_if(is.integer) %>% names
Vars <- colnames(GermanCredit)
tobeConvertedVars <- Vars[!Vars %in% integerVars]
GermanCredit[tobeConvertedVars] <- lapply(GermanCredit[tobeConvertedVars], factor)
UniqueVars <- Vars[caret::nearZeroVar(GermanCredit,uniqueCut = 0)]
Vars2select <- Vars[!Vars %in% UniqueVars]
GermanCredit <- GermanCredit %>% dplyr::select(!!Vars2select)
trans <- caret::preProcess(GermanCredit,center = T, scale = T)
GermanCredit.copy <- predict(trans, GermanCredit)
View(GermanCredit.copy)
data("GermanCredit")
skimr::skim(GermanCredit)
integerVars <- GermanCredit  %>% dplyr::select_if(is.integer) %>% names
Vars <- colnames(GermanCredit)
tobeConvertedVars <- Vars[!Vars %in% integerVars]
GermanCredit[tobeConvertedVars] <- lapply(GermanCredit[tobeConvertedVars], factor)
UniqueVars <- Vars[caret::nearZeroVar(GermanCredit,uniqueCut = 0)]
Vars2select <- Vars[!Vars %in% UniqueVars]
GermanCredit <- GermanCredit %>% dplyr::select(!!Vars2select)
trans <- caret::preProcess(GermanCredit,center = T, scale = T)
GermanCredit <- predict(trans, GermanCredit)
# Data sampled without replacement
samples <- rsample::mc_cv(data = GermanCredit,prop = 0.632,times = 1000)
# Verify the dimensions of the first of the 1000 splits
SampleVerification <- purrr::map_df(1:1000,.f = function(x) data.frame(ResampleId = x,TrainRows = nrow(analysis(samples$splits[[x]])), TestRows = nrow(assessment(samples$splits[[x]]))) )
lattice::xyplot(TrainRows + TestRows ~ ResampleId,data = SampleVerification,ylab = "Rows of data",auto.key=list(space="bottom", columns=4, cex.title=1,lines=TRUE, points=FALSE, box = T))
# Function to get model stats
ModelSummaries <- function(split){
# get the train and test sets from the split
Train <- rsample::analysis(split$splits[[1]])
Vars <- colnames(Train)
# get variables that have only one unique value
UniqueVars <- caret::nearZeroVar(Train,uniqueCut = 0)
if(length(UniqueVars) > 0){
Train <- Train[,UniqueVars*-1]
Test <- Test[,UniqueVars*-1]
}
Test <- rsample::assessment(split$splits[[1]])
# linear model fit
lm.fit <- lm(Amount ~ ., data = Train)
coefs <- coefficients(lm.fit)
AdjR2.Train <- summary(lm.fit)$adj.r.squared
yPred <- predict(lm.fit,newdata = Test)
R2.test <- cor(yPred,Test$Amount)^2
return(list(Betas = coefs,Train.R2 = AdjR2.Train, Test.R2 = R2.test))
}
ModelStats <- purrr::map(1:1000,function(x) ModelSummaries(samples[x,]))
ModelStats[[1]]
View(ModelStats)
lengthVer <- sapply(1:1000,function(x) length(ModelStats[[x]]$Betas))
plot(lengthVer)
sd(lengthVer)
lengthVer <- sapply(1:1000,function(x) names(ModelStats[[x]]$Betas))
View(lengthVer)
lenver2 <- data.frame(lengthVer)
View(lengthVer)
View(lenver2)
test2 <- apply(1:60, function(x) length(unique(lenver2[x,])))
test2 <- apply(1:60, function(x) {length(unique(lenver2[x,]))})
test2 <- sapply(1:60, function(x) {length(unique(lenver2[x,]))})
unique(lengthVer[1,])
length(unique(lengthVer[1,]))
test2 <- sapply(1:60, function(x) {length(unique(lengthVer[x,]))})
plot(test2)
df.coef <- sapply(1:1000, function(x){ModelStats[[x]]$Betad})
View(df.coef)
df.coef[[1]]
df.coef <- sapply(1:1000, function(x){ModelStats[[x]]$Betas})
View(df.coef)
View(t(df.coef))
df.coef <- t(df.coef)
df.coef <- sapply(1:1000, function(x){ModelStats[[x]]$Betas})
df.coef <- t(df.coef)
df.R2$train <- sapply(1:1000, function(x){ModelStats[[x]]$Train.R2})
df.R2 <- as.data.frame()
df.R2 <- data.frame()
df.R2$train <- sapply(1:1000, function(x){ModelStats[[x]]$Train.R2})
Rsquared <- data.frame(Train = train <- sapply(1:1000, function(x){ModelStats[[x]]$Train.R2}),
Test = sapply(1:1000, function(x){ModelStats[[x]]$Test.R2}))
View(Rsquared)
knitr::opts_chunk$set(echo = TRUE)
library(caret)
library(rsample)
library(ggplot2)
library(dplyr)
Rsquared <- Rsquared %>% mutate(PercFall = (Train - Test)/Train)
hist(df.coef)
View(df.coef)
View(df.coef,1)
hist(df.coef[,1])
test <- tidyr::gather(df.coef)
df.coef.copy <- as.data.frame(df.coef)
test <- tidyr::gather(df.coef.copy)
View(test)
ggplot(data = test, mapping = aes(x=value)) + geom_histogram() + facet_wrap(~variable)
ggplot(data = test, mapping = aes(x=value)) + geom_histogram() + facet_wrap(~key)
ggplot(data = test, mapping = aes(x=value)) + geom_histogram() + facet_wrap(~key, scales = 'free_x')
skimr::skim(df.coef)
skimr::skim(df.coef.copy)
knitr::opts_chunk$set(echo = TRUE)
library(caret)
library(rsample)
library(ggplot2)
library(dplyr)
df.coef <- data.frame(df.coef)
df.coef.plotdf <- tidyr::gather(df.coef)
ggplot(data = df.coef.plotdf, mapping = aes(x=value)) + geom_histogram() + facet_wrap(~key, scales = 'free_x')
df.coef <- data.frame(df.coef)
df.coef.plotdf <- tidyr::gather(df.coef)
ggplot(data = df.coef.plotdf, mapping = aes(x=value)) + geom_histogram() + facet_wrap(~key, scales = 'free_x')
install.packages("Rmisc")
library(Rmisc)
CI(df.coef[,1])
Stats <- data.frame(df.coef,2,CI)
Stats <- purrr::map_df(1:60,function(x){CI(df.coef[,x])})
Stats <- purrr::map_df(.x=1:60,function(x){CI(df.coef[,x])})
Stats <- apply(.x=1:60,function(x){CI(df.coef[,x])})
Stats <- sapply(.x=1:60,function(x){CI(df.coef[,x])})
Stats <- sapply(1:60, function(x){CI(df.coef[,x])})
View(resptest)
View(Stats)
Stats <- t(sapply(1:60, function(x){CI(df.coef[,x])}))
View(Stats)
Stats <- data.frame(t(sapply(1:60, function(x){CI(df.coef[,x])}))) %>% dplyr::mutate(Predictor = colnames(df.coef))
View(Stats)
Stats <- data.frame(t(sapply(1:60, function(x){CI(df.coef[,x])}))) %>% dplyr::mutate(Predictor = colnames(df.coef)) %>%
dplyr::select(Predictor,lower,upper)
sample(1:1000,632)
knitr::opts_chunk$set(echo = TRUE)
library(caret)
library(rsample)
library(ggplot2)
library(dplyr)
trainSamples <- sample(1000,632)
lmfit.once <- lm(Amount ~ ., data = GermanCredit[train,])
GermanCredit <- predict(trans, GermanCredit)
trainSamples <- sample(1000,632)
lmfit.once <- lm(Amount ~ ., data = GermanCredit[train,])
nearZeroVar(GermanCredit,uniqueCut = 0)
lmfit.once <- lm(Amount ~ ., data = GermanCredit[train,])
nearZeroVar(GermanCredit[train,],uniqueCut = 0)
#nearZeroVar(GermanCredit[train,],uniqueCut = 0)
lmfit.once <- lm(Amount ~ ., data = GermanCredit[trainSamples,])
coefs.omce <- coef(lmfit.once)
coefs.omce
View(Stats)
Stats <- Stats %>% dplyr::mutate(OneTimeSplitCoef = coefs.omce)
data("GermanCredit")
skimr::skim(GermanCredit)
integerVars <- GermanCredit  %>% dplyr::select_if(is.integer) %>% names
Vars <- colnames(GermanCredit)
tobeConvertedVars <- Vars[!Vars %in% integerVars]
GermanCredit[tobeConvertedVars] <- lapply(GermanCredit[tobeConvertedVars], factor)
UniqueVars <- Vars[caret::nearZeroVar(GermanCredit,uniqueCut = 0)]
Vars2select <- Vars[!Vars %in% UniqueVars]
GermanCredit <- GermanCredit %>% dplyr::select(!!Vars2select)
trans <- caret::preProcess(GermanCredit,center = T, scale = T)
GermanCredit <- predict(trans, GermanCredit)
lmfit.once <- lm(Amount ~ ., data = GermanCredit[trainSamples,])
coefs.omce <- coef(lmfit.once)
Stats <- Stats %>% dplyr::mutate(OneTimeSplitCoef = coefs.omce)
Stats <- data.frame(t(sapply(1:60, function(x){CI(df.coef[,x])}))) %>% dplyr::mutate(Predictor = colnames(df.coef)) %>%
dplyr::select(Predictor,lower,mean,upper)
Stats <- Stats %>% dplyr::mutate(OneTimeSplitCoef = coefs.omce)
Stats <- Stats %>% dplyr::mutate(OneTimeSplitCoef = coefs.omce, WithinCI = if(coefs.omce >= lower & coefs.omce <= upper))
Stats <- Stats %>% dplyr::mutate(OneTimeSplitCoef = coefs.omce, WithinCI = if_else(coefs.omce >= lower & coefs.omce <= upper))
Stats <- Stats %>% dplyr::mutate(OneTimeSplitCoef = coefs.omce, WithinCI = if_else(coefs.omce >= lower & coefs.omce <= upper,"Within","Outside"))
table(Stats$WithinCI)
View(Rsquared)
par(mfrow(1,3))
par(mfrow=c(1,3))
hist(Rsquared$Train,xlab = "RSquared Training")
hist(Rsquared$Test,xlab = "RSquared Test")
hist(Rsquared$PercFall, xlab = "% Fall in RSquared from Train to Test")
par(mfrow=c(1,3))
hist(Rsquared$Train,xlab = "RSquared Training", Main="")
hist(Rsquared$Test,xlab = "RSquared Test", Main="")
hist(Rsquared$PercFall, xlab = "% Fall in RSquared from Train to Test", Main="")
par(mfrow=c(1,3))
hist(Rsquared$Train,xlab = "RSquared Training", main="")
hist(Rsquared$Test,xlab = "RSquared Test", main="")
hist(Rsquared$PercFall, xlab = "% Fall in RSquared from Train to Test", main="")
par(mfrowh)
unlink('BonusAssignment2_cache', recursive = TRUE)
sessioninfo()
sessionInfo()
install.packages("rmarkdown")
install.packages("rmarkdown")
